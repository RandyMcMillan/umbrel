#!/usr/bin/env bash
set -euo pipefail

UMBREL_ROOT="$(readlink -f $(dirname "${BASH_SOURCE[0]}")/..)"
USER_FILE="${UMBREL_ROOT}/db/user.json"
DEFAULT_UMBREL_APP_REPO_URL="https://github.com/getumbrel/umbrel-apps.git"

show_help() {
  cat << EOF
repo 0.0.2

CLI for managing local Umbrel App Repos

Usage: repo <command> <arguments...>

Commands:
  id                          Get id of active app repo
  path                        Get path of active app repo
  set                         Set remote app repo url
  update                      Update local app repo
  branch                      Set the branch for the local app repo
  checkout                    Checkout a remote app repo (branch is optional) e.g. https://github.com/coolapp/umbrel-apps.git#staging
  default-repo                Get default remote app repo url
    
EOF
}

check_dependencies () {
  for cmd in "$@"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

# Check dependencies
check_dependencies git jq timeout

if [ -z ${1+x} ]; then
  command=""
else
  command="$1"
fi

# If the 'user.json' doesn't exist or the 'appRepo' property is empty
# Then we use the default app repo url
USER_JSON=$(cat "${USER_FILE}" 2> /dev/null || echo "null")
APP_REPO_URL=$(echo "${USER_JSON}" | jq -r "if (has(\"appRepo\") and (.appRepo | length > 0)) then .appRepo else \"${DEFAULT_UMBREL_APP_REPO_URL}\" end")

function repo_id() {
  echo "${APP_REPO_URL}" | sed 's/[^a-zA-Z0-9]/-/g'
}

function repo_path() {
  REPO=$(repo_id)
  echo "${UMBREL_ROOT}/repos/${REPO}"
}

# Prints out repo ID
if [[ "$command" = "id" ]]; then
  repo_id
  exit
fi

if [[ "$command" = "path" ]]; then
  repo_path
  exit
fi

# Sets the active repo
if [[ "$command" = "set" ]]; then
  repo_url="${2-}"

  if [[ -z "${repo_url}" ]]; then
    >&2 echo "A valid remote repo url must be set. e.g. https://github.com/getumbrel/umbrel-apps.git"
    exit 1
  fi

  echo "Setting app repo to: ${repo_url}"

  jq ".appRepo = \"${repo_url}\"" "${USER_FILE}" > /tmp/user.json
  mv /tmp/user.json "${USER_FILE}"

  exit
fi

# Update local copies of repos from remote
if [[ "$command" = "update" ]]; then
  repo=$(repo_id)

  if [[ -z "${repo}" ]]; then
    >&2 echo "Error, can't update app repo when no repo is set."
    exit 1
  fi

  LOCAL_REPO_PATH=$(repo_path)

  # Check the local app repo is marked as safe by Git
  if ! git config --global --get safe.directory | grep --quiet "^${LOCAL_REPO_PATH}$"; then
    git config --global --add safe.directory "${LOCAL_REPO_PATH}"
  fi

  # Check integrity of local app repo
  if [[ -d "${LOCAL_REPO_PATH}" ]]; then
    set +e
    OUT=$(git -C "${LOCAL_REPO_PATH}" status 2>&1)
    # 1 = network error (and other errors)
    # 128 = git repo bad/corrupt/incomplete
    EXIT_CODE=$?
    set -e
    if [[ "${EXIT_CODE}" == "128" ]]; then
      echo "${OUT}"
      echo
      echo "Bad local app repo detected. Removing..."
      
      rm -rf "${LOCAL_REPO_PATH}"
    fi
  fi

  if [[ -d "${LOCAL_REPO_PATH}" ]]; then
    REPO_BRANCH=$(git -C "${LOCAL_REPO_PATH}" rev-parse --abbrev-ref HEAD)
    echo "Updating repo: ${repo} (${REPO_BRANCH})"

    timeout --foreground 30 git -C "${LOCAL_REPO_PATH}" pull
  else
    echo "Cloning repo: ${repo} from: ${APP_REPO_URL}"

    timeout --foreground 30 git clone --depth 1 "${APP_REPO_URL}" "${LOCAL_REPO_PATH}"
  fi

  # Make sure app repo doesn't end up being owned by root or some apps will fail
  # with fs permission errors
  chown -R "1000:1000" "${LOCAL_REPO_PATH}"

  exit
fi

if [[ "$command" = "branch" ]]; then
  branch="${2-}"

  if [[ -z "${branch}" ]]; then
    >&2 echo "A valid branch name must be given. e.g. staging"
    exit 1
  fi

  LOCAL_REPO_PATH=$(repo_path)

  if [[ ! -d "${LOCAL_REPO_PATH}" ]]; then
    >&2 echo "App repo does not yet exist locally"
    >&2 echo "Please use the 'update' subcommand"
    exit 1
  fi

  # Check whether it's only fetching for master
  GIT_CONFIG_FILE="${LOCAL_REPO_PATH}/.git/config"
  if grep -q "refs/heads/master:refs/remotes/origin/master" "${GIT_CONFIG_FILE}"; then
    sed -i "s/refs\/heads\/master:refs\/remotes\/origin\/master/refs\/heads\/*:refs\/remotes\/origin\/*/g;" "${GIT_CONFIG_FILE}"
  fi

  # Fetch remote commits, files, and refs
  git -C "${LOCAL_REPO_PATH}" fetch

  # Checkout branch
  git -C "${LOCAL_REPO_PATH}" checkout "${branch}"

  # Update local repo
  "${0}" "update"

  exit
fi

if [[ "$command" = "checkout" ]]; then
  descriptor="${2-}"

  if [[ -z "${descriptor}" ]]; then
    >&2 echo "A valid remote git repo descriptor must be given. e.g. coolapp/umbrel-apps"
    exit 1
  fi

  # These are all valid repo descriptors
  # - http://github.com/coolapp/umbrel-apps
  # - coolapp/umbrel-apps (will use github.com via https)
  # - coolapp/umbrel-apps#staging

  # Note: using the .git extension is optional

  # Check whether a base url is in the descriptor
  # And if not, default to github.com via https
  if [[ "${descriptor}" != http* ]] && [[ "${descriptor}" != git@ ]]; then
    descriptor="https://github.com/${descriptor}"
  fi

  repo="${descriptor%%#*}"

  if [[ "${repo}" != *.git ]]; then
    repo="${repo}.git"
  fi

  "${0}" "set" "${repo}"

  "${0}" "update"

  if [[ "${descriptor}" == *"#"* ]]; then
    branch="${descriptor#*#}"

    echo
    "${0}" "branch" "${branch}"
  fi

  exit
fi

if [[ "$command" = "default-repo" ]]; then
  echo "${DEFAULT_UMBREL_APP_REPO_URL}"
  exit
fi

# If we get here it means no valid command was supplied
# Show help and exit
show_help
exit 1
